// Auto-generated by wxEC - Tue Jul 13 00:12:08 2010
// Do not edit this file - it will be overwritten on next pass
// Make any necessary changes to the source file:
// c:\pkg\wx\wxEC\enums.e

#ifndef _ENUMS_H
#define _ENUMS_H

/*============================================================================*/
class EState
{
public:
  // EState::Unknown,Solid,Liquid,Gas,
  enum Enum
  {

    Unknown =   0,
    Solid =   1, // "Solid Matter"
    Liquid =   2, // "Liquid Matter "
    Gas, // "Vapour"
  };

  EState();
  virtual ~EState();

  inline int GetSize() { return m_iMapSize; };  //AWW
  Enum operator=(int i);
  operator int () const;

  Enum operator=(const char* sz);
  bool operator==(const char* sz);
  operator const char* () const;
  static Enum AsEnum(const char* sz);
  static Enum AsEnum(int e);
  static const char* AsName(int e);

  static bool GetMap(int iIndex, int& iValue, const char*& szDescription);

private:
  Enum m_Enum;

  struct Map_t
  {
    int iValue;
    const char* szDescription;
    const wxString wsDescription;
  };
  static Map_t m_Map[];

  static const int m_iMapSize;
};

/*============================================================================*/
class Greet
{
public:
  // Greet::Unknown,Hello,There,Bye,Now,
  enum Enum
  {

    Unknown,
    Hello = 364, // "Hello"
    There, // "There !!! "
    Bye =  23, // " I am going now "
    Now,
  };

  Greet();
  virtual ~Greet();

  inline int GetSize() { return m_iMapSize; };  //AWW
  Enum operator=(int i);
  operator int () const;

  Enum operator=(const char* sz);
  bool operator==(const char* sz);
  operator const char* () const;
  static Enum AsEnum(const char* sz);
  static Enum AsEnum(int e);
  static const char* AsName(int e);

  static bool GetMap(int iIndex, int& iValue, const char*& szDescription);

private:
  Enum m_Enum;

  struct Map_t
  {
    int iValue;
    const char* szDescription;
    const wxString wsDescription;
  };
  static Map_t m_Map[];

  static const int m_iMapSize;
};

/*============================================================================*/
class Eat
{
public:
  // Eat::Unknown,Schnitzel,CafeMocha,Bill,Money,
  enum Enum
  {

    Unknown,
    Schnitzel = 389, // "Porky"
    CafeMocha, // "The usual"
    Bill =  23, // " I am going now "
    Money, // "Thanks man"
  };

  Eat();
  virtual ~Eat();

  inline int GetSize() { return m_iMapSize; };  //AWW
  Enum operator=(int i);
  operator int () const;

  Enum operator=(const char* sz);
  bool operator==(const char* sz);
  operator const char* () const;
  static Enum AsEnum(const char* sz);
  static Enum AsEnum(int e);
  static const char* AsName(int e);

  static bool GetMap(int iIndex, int& iValue, const char*& szDescription);

private:
  Enum m_Enum;

  struct Map_t
  {
    int iValue;
    const char* szDescription;
    const wxString wsDescription;
  };
  static Map_t m_Map[];

  static const int m_iMapSize;
};

/*============================================================================*/
class EatNoUnknown
{
public:
  // EatNoUnknown::Chop,Schnitzel,CafeMocha,Bill,Money,
  enum Enum
  {

    Chop,
    Schnitzel = 364, // "Porky"
    CafeMocha, // "The usual"
    Bill =  23, // " I am going now "
    Money, // "Thanks man"
  };

  EatNoUnknown();
  virtual ~EatNoUnknown();

  inline int GetSize() { return m_iMapSize; };  //AWW
  Enum operator=(int i);
  operator int () const;

  Enum operator=(const char* sz);
  bool operator==(const char* sz);
  operator const char* () const;
  static Enum AsEnum(const char* sz);
  static Enum AsEnum(int e);
  static const char* AsName(int e);

  static bool GetMap(int iIndex, int& iValue, const char*& szDescription);

private:
  Enum m_Enum;

  struct Map_t
  {
    int iValue;
    const char* szDescription;
    const wxString wsDescription;
  };
  static Map_t m_Map[];

  static const int m_iMapSize;
};

#endif // _ENUMS_H
// ------------------------------- eof ------------------------------
